from zipline.pipeline import Pipeline, enginefrom zipline.pipeline.factors import AverageDollarVolume, Returnsfrom zipline.pipeline.engine import (    ExplodingPipelineEngine,    SimplePipelineEngine,)from zipline.algorithm import TradingAlgorithmfrom zipline.data.bundles.core import loadfrom zipline.data.data_portal import DataPortalfrom zipline.finance.trading import TradingEnvironmentfrom zipline.pipeline.data import USEquityPricingfrom zipline.pipeline.loaders import USEquityPricingLoaderfrom zipline.utils.calendars import get_calendarfrom zipline.utils.factory import create_simulation_parametersfrom zipline.utils.cli import Date, Timestampimport pandas as pdimport osimport reDEFAULT_CAPITAL_BASE = 1e5from zipline.pipeline.factors import CustomFactor,Latestfrom zipline.data.bundles import registerfrom zipline.data.bundles.viadb import viadbfrom me.pipeline.factors.tsfactor import Fundamental############################################# bundle #############################################equities1={}register(   'my-db-bundle',  # name this whatever you like    viadb(equities1),    calendar='SHSZ')bundle = 'my-db-bundle'bundle_timestamp = pd.Timestamp.utcnow()environ = os.environbundle_data = load(    bundle,    environ,    bundle_timestamp,)prefix, connstr = re.split(        r'sqlite:///',        str(bundle_data.asset_finder.engine.url),        maxsplit=1,    )print prefix, connstrif prefix:    raise ValueError(        "invalid url %r, must begin with 'sqlite:///'" %        str(bundle_data.asset_finder.engine.url),    )############################################# trading_environment #############################################trading_calendar = get_calendar("SHSZ")trading_environment = TradingEnvironment(bm_symbol=None,                                         exchange_tz="Asia/Shanghai",                                         trading_calendar=trading_calendar,                                         asset_db_path=connstr)'''first_trading_day = \    bundle_data.equity_minute_bar_reader.first_trading_daydata = DataPortal(    trading_environment.asset_finder, get_calendar("SHSZ"),    first_trading_day=first_trading_day,    equity_minute_reader=bundle_data.equity_minute_bar_reader,    equity_daily_reader=bundle_data.equity_daily_bar_reader,    adjustment_reader=bundle_data.adjustment_reader,)'''############################################# choose_loader #############################################pipeline_loader = USEquityPricingLoader(        bundle_data.equity_daily_bar_reader,        bundle_data.adjustment_reader,)def choose_loader(column):    if column in USEquityPricing.columns:            return pipeline_loader    raise ValueError(            "No PipelineLoader registered for column %s." % column    )#data_frequency = 'daily',#capital_base = DEFAULT_CAPITAL_BASEstart = '2015-9-1'end = '2015-9-9''''sim_params = create_simulation_parameters(             capital_base=capital_base,             start=Date(tz='utc', as_timestamp=True).parser(start),             end=Date(tz='utc', as_timestamp=True).parser(end),             data_frequency=data_frequency,             trading_calendar=trading_calendar,           )'''#print Date(tz='utc', as_timestamp=True).parser(start)#perf_tracker = None# Pull in the environment's new AssetFinder for quick reference#print trading_calendar.all_sessionsyour_engine = SimplePipelineEngine(get_loader=choose_loader, calendar=trading_calendar.all_sessions, asset_finder=trading_environment.asset_finder)def make_pipeline():    h2o = (USEquityPricing.high.latest - USEquityPricing.open.latest) / USEquityPricing.open.latest    l2o = (USEquityPricing.low.latest - USEquityPricing.open.latest)  / USEquityPricing.open.latest    c2o = (USEquityPricing.close.latest - USEquityPricing.open.latest) / USEquityPricing.open.latest    h2c = (USEquityPricing.high.latest - USEquityPricing.close.latest) / USEquityPricing.close.latest    l2c = (USEquityPricing.low.latest - USEquityPricing.close.latest) / USEquityPricing.close.latest    vol = USEquityPricing.volume.latest    outstanding = Fundamental(trading_environment.asset_finder).outstanding    outstanding.window_safe = True    turnover_rate = vol/Latest([outstanding])    pipe_columns = {        'h2o': h2o,        'l2o': l2o,        'c2o': c2o,        'h2c': h2c,        'l2c': l2c,        'vol': vol,        'turnover_rate': turnover_rate,    }    #pipe_screen = (low_returns | high_returns)    pipe = Pipeline(columns=pipe_columns)    return pipemy_pipe = make_pipeline()result = your_engine.run_pipeline(my_pipe,Date(tz='utc', as_timestamp=True).parser(start),Date(tz='utc', as_timestamp=True).parser(end))print result