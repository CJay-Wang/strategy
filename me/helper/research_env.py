from zipline.pipeline import Pipeline, enginefrom zipline.pipeline.factors import AverageDollarVolume, Returnsfrom zipline.pipeline.engine import (    ExplodingPipelineEngine,    SimplePipelineEngine,)from zipline.algorithm import TradingAlgorithmfrom zipline.data.bundles.core import loadfrom zipline.data.data_portal import DataPortalfrom zipline.finance.trading import TradingEnvironmentfrom zipline.pipeline.data import USEquityPricingfrom zipline.pipeline.loaders import USEquityPricingLoaderfrom zipline.utils.calendars import get_calendarfrom zipline.utils.factory import create_simulation_parametersfrom zipline.utils.cli import Date, Timestampimport pandas as pdimport numpy as npimport osimport reDEFAULT_CAPITAL_BASE = 1e5from zipline.pipeline.factors import CustomFactor,Latestfrom zipline.data.bundles import registerfrom zipline.data.bundles.viadb import viadbfrom me.pipeline.factors.tsfactor import Fundamentalpd.set_option('display.width', 800)def env_isinstance(bundle='my-db-bundle',calendar='SHSZ',exchange_tz="Asia/Shanghai"):    ############################################# bundle #############################################    equities1={}    register(        bundle,  # name this whatever you like        viadb(equities1),        calendar=calendar    )    bundle = 'my-db-bundle'    bundle_timestamp = pd.Timestamp.utcnow()    environ = os.environ    bundle_data = load(        bundle,        environ,        bundle_timestamp,    )    prefix, connstr = re.split(            r'sqlite:///',            str(bundle_data.asset_finder.engine.url),            maxsplit=1,        )    print prefix, connstr    if prefix:        raise ValueError(            "invalid url %r, must begin with 'sqlite:///'" %            str(bundle_data.asset_finder.engine.url),        )    ############################################# trading_environment #############################################    trading_calendar = get_calendar(calendar)    trading_environment = TradingEnvironment(bm_symbol=None,                                             exchange_tz=exchange_tz,                                             trading_calendar=trading_calendar,                                             asset_db_path=connstr)    ############################################# choose_loader #############################################    pipeline_loader = USEquityPricingLoader(            bundle_data.equity_daily_bar_reader,            bundle_data.adjustment_reader,    )    def choose_loader(column):        if column in USEquityPricing.columns:                return pipeline_loader        raise ValueError(                "No PipelineLoader registered for column %s." % column        )    your_engine = SimplePipelineEngine(get_loader=choose_loader, calendar=trading_calendar.all_sessions,                                       asset_finder=trading_environment.asset_finder)    #your_engine._finder    return your_engine